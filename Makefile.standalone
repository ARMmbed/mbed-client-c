#
# Makefile for combined NSDL+COAP library
#

# Define compiler toolchain with CC or PLATFORM variables
# Example (GCC toolchains, default $CC and $AR are used)
# make
#
# OR (Cross-compile GCC toolchain)
# make PLATFORM=arm-linux-gnueabi-
#
# OR (armcc/Keil)
# make CC=armcc AR=ArmAR
#
# OR (IAR-ARM)
# make CC=iccarm

include include_dirs.mk

LIB = libnsdl.a
SRCS := \
	source/libNsdl/src/sn_grs.c \
	source/libNsdl/src/sn_nsdl.c \
	source/libCoap/src/sn_coap_protocol.c \
	source/libCoap/src/sn_coap_parser.c \
	source/libCoap/src/sn_coap_header_check.c \
	source/libCoap/src/sn_coap_builder.c \

override CFLAGS += -DVERSION='"$(VERSION)"'

# Set the target path where submodules will be deployed to,
# functionally similar than the yotta_modules.
SUBMODULE_BASE_PATH ?= $(CURDIR)/standalone_modules

override CFLAGS += -Isource/libNsdl/src/include/
override CFLAGS += -Isource/libCoap/src/include/
SERVLIB_DIR := ../libService
override CFLAGS += -I$(SERVLIB_DIR)/libService
override CFLAGS += -Insdl-c/
override CFLAGS += $(addprefix -I,$(INCLUDE_DIRS))

# List of libraries to build with Makefile.standalone
LIBS := \

# these will be downloaded, but built with special rules
SPECIAL_LIBS := \
	nanostack-libservice \

include toolchain_rules.mk

$(eval $(call generate_rules,$(LIB),$(SRCS)))

# Get the generic rules for fetching source and building submodules
include standalone_rules.mk

.PHONY: all 
all: $(SUBMODULE_BASE_PATH) $(TARGET_MODULES) $(BUILDDIRS)
	@echo Build OK!

.PHONY: release
release:
	7z a nsdl-c_$(VERSION).zip *.a *.lib include

.PHONY: deploy_to
deploy_to: all
	tar --transform 's,^,nsdl-c/,' --append -f $(TO) *.a nsdl-c


# create the submodule dir if one does not exist
$(SUBMODULE_BASE_PATH):
	mkdir -p $(SUBMODULE_BASE_PATH)

# perform a git clone of the submodules listed in $(LIBS)
.PHONY: fetch_source
fetch_source: $(FETCH_SUB_MODULES)

