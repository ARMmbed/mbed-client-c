#
# Makefile for combined NSDL+COAP library
#

# Define compiler toolchain with CC or PLATFORM variables
# Example (GCC toolchains, default $CC and $AR are used)
# make
#
# OR (Cross-compile GCC toolchain)
# make PLATFORM=arm-linux-gnueabi-
#
# OR (armcc/Keil)
# make CC=armcc AR=ArmAR
#
# OR (IAR-ARM)
# make CC=iccarm

include include_dirs.mk

LIB = libnsdl.a
SRCS := \
	source/libNsdl/src/sn_grs.c \
	source/libNsdl/src/sn_nsdl.c \
	source/libCoap/src/sn_coap_protocol.c \
	source/libCoap/src/sn_coap_parser.c \
	source/libCoap/src/sn_coap_header_check.c \
	source/libCoap/src/sn_coap_builder.c \

override CFLAGS += -DVERSION='"$(VERSION)"'

# Set the target path where submodules will be deployed to,
# functionally similar than the yotta_modules.
SUBMODULE_BASE_PATH ?= $(CURDIR)/standalone_modules

override CFLAGS += -Isource/libNsdl/src/include/
override CFLAGS += -Isource/libCoap/src/include/
SERVLIB_DIR := ../libService
override CFLAGS += -I$(SERVLIB_DIR)/libService
override CFLAGS += -Insdl-c/
override CFLAGS += $(addprefix -I,$(INCLUDE_DIRS))

# List of libraries to build with Makefile.standalone
LIBS := \

# these will be downloaded, but built with special rules
SPECIAL_LIBS := \
	nanostack-libservice \

include ../../libService/toolchain_rules.mk

$(eval $(call generate_rules,$(LIB),$(SRCS)))

.PHONY: release
release:
	7z a nsdl-c_$(VERSION).zip *.a *.lib include

.PHONY: deploy_to
deploy_to: all
	tar --transform 's,^,nsdl-c/,' --append -f $(TO) *.a nsdl-c

FETCH_SUB_MODULES := $(LIBS:%=fetch-%)
.PHONY: $(FETCH_SUB_MODULES)
$(FETCH_SUB_MODULES): $(SUBMODULE_BASE_PATH)
	@echo $@
	make -C $(SUBMODULE_BASE_PATH)/$(@:fetch-%=%) -f Makefile.standalone fetch_source SUBMODULE_BASE_PATH=$(SUBMODULE_BASE_PATH) CC=$(CC) CPU=$(CPU)


# create the submodule dir if one does not exist
$(SUBMODULE_BASE_PATH):
	mkdir -p $(SUBMODULE_BASE_PATH)

# macro for fetching the file content to a variable
LIB_CONTENT = $(shell cat $1)

GIT_URL = $(word 1, $(subst \#, , $1))
GIT_HASH = $(word 2, $(subst \#, , $1))

# Rule for processing the mbed-cli's submodule reference files (.lib).
# The lib files contain a <repository-git-url>#<commit-hash> as a string
# which is extracted and used for "git clone" + "git checkout" commands
$(SUBMODULE_BASE_PATH)/% : %.lib
	cd $(SUBMODULE_BASE_PATH) && \
	if [ -d $@ ]; then \
		echo Just update the repository && \
		pwd &&\
		cd $@ && \
		git fetch; \
	else \
		echo Clone the repository && \
		pwd && \
		git clone $(call GIT_URL, $(call LIB_CONTENT, $<)) && \
		cd $@; \
	fi; \
	git checkout $(call GIT_HASH, $(call LIB_CONTENT, $<))

# perform a git clone of the submodules listed in $(LIBS)
.PHONY: fetch_source
fetch_source: $(FETCH_SUB_MODULES)

